<?xml version="1.0"?>
<!-- JBoss, Home of Professional Open Source Copyright 2013, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.jboss.quickstarts.jdg</groupId>
	<artifactId>jboss-remote-query-quickstart</artifactId>
	<version>6.2.0-SNAPSHOT</version>
	<name>JBoss JDG Quickstart: remote-query</name>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<distribution>repo</distribution>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Defines the main class to be execute when running java -jar command -->
		<main.class.remote-query>org.jboss.as.quickstarts.datagrid.hotrod.query.AddressBookManager</main.class.remote-query>

		<version.org.infinispan>6.0.0.Final</version.org.infinispan>
		<version.remoting.jmx>1.1.0.Final</version.remoting.jmx>

		<!-- other plugin versions -->
		<exec.plugin.version>1.2.1</exec.plugin.version>
		<ant.plugin.version>1.7</ant.plugin.version>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.6</maven.compiler.target>
		<maven.compiler.source>1.6</maven.compiler.source>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.infinispan</groupId>
				<artifactId>infinispan-bom</artifactId>
				<version>${version.org.infinispan}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Import the infinispan core -->
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-core</artifactId>
		</dependency>

		<!-- Import the Infinispan client hotrod -->
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-client-hotrod</artifactId>
		</dependency>

		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-query-dsl</artifactId>
		</dependency>

		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-remote-query-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.remotingjmx</groupId>
			<artifactId>remoting-jmx</artifactId>
			<version>${version.remoting.jmx}</version>
		</dependency>
	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated jar) -->
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>**/*.proto</exclude>
				</excludes>
			</resource>

			<resource>
				<directory>${project.build.directory}/protobuf-descriptors</directory>
			</resource>
		</resources>

		<pluginManagement>
			<plugins>
				<!-- Execute protoc tool to parse our proto definitions and generate 
					the serialized descriptor set (protobin). You must have the protoc tool installed. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${ant.plugin.version}</version>
					<executions>
						<execution>
							<id>compile-protoc</id>
							<phase>generate-resources</phase>
							<configuration>
								<target>
									<mkdir
										dir="${project.build.directory}/protobuf-descriptors/quickstart" />
									<exec executable="protoc" failonerror="true">
										<arg value="--proto_path=${project.basedir}/src/main/resources" />
										<arg
											value="--descriptor_set_out=${project.build.directory}/protobuf-descriptors/quickstart/addressbook.protobin" />
										<arg
											value="${project.basedir}/src/main/resources/quickstart/addressbook.proto" />
									</exec>
								</target>
							</configuration>
							<goals>
								<goal>run</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- This plugin permits the execution of this quickstart through mvn 
					exec:java command -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${exec.plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>java</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<mainClass>${main.class.remote-query}</mainClass>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>custom-classpath</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${ant.plugin.version}</version>
						<executions>
							<execution>
								<id>prepare-directories</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<tasks>
										<echo message="Build create lib/ directory" />
										<delete dir="${project.build.directory}/lib" />
										<mkdir dir="${project.build.directory}/lib" />
									</tasks>
								</configuration>
							</execution>
							<execution>
								<id>copy-dependencies</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<tasks>
										<echo
											message="Copying libraries from server distribution to lib/ directory" />
										<copy todir="${project.build.directory}/lib">
											<fileset dir="${classpath}">
												<include name="*.jar" />
											</fileset>
										</copy>
										<pathconvert pathsep=" " property="jar.classpath">
											<fileset dir="${project.build.directory}/lib" />
											<chainedmapper>
												<flattenmapper />
												<filtermapper>
													<replacestring from=" " to="%20" />
												</filtermapper>
												<globmapper from="*" to="lib/*" />
											</chainedmapper>
										</pathconvert>
										<echo message="CLASSPATH= ${jar.classpath}" />
									</tasks>
									<exportAntProperties>true</exportAntProperties>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<archive>
								<manifest>
									<addDefaultImplementationEntries>false</addDefaultImplementationEntries>
									<addClasspath>false</addClasspath>
									<mainClass>${main.class.remote-query}</mainClass>
								</manifest>
								<manifestEntries>
									<Class-Path>${jar.classpath}</Class-Path>
								</manifestEntries>
							</archive>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
